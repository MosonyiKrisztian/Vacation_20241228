@page "/addirregularday"

@using SharedDTO
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient HttpClient
@inject NavigationManager NavManager

<h3>Munkaszüneti napok</h3>

@* @foreach (var item in fixVacationDays)
{
    <p>@item.Key @item.Value</p>
} *@

<div class="row">
    <div class="col-md-4">
        <EditForm Model="newIrregularDay" OnValidSubmit="AddNewIrregularDay" FormName="AddnewIrregularDay" Enhance>
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="fn" class="form-label m-3">Dátum</label>
                <InputDate id="fn" class="form-control" @bind-Value="newIrregularDay.IrrDate"/>
                <ValidationMessage class="text-black" For="()=>newIrregularDay.IrrDate" />
            </div>

            <div class="mb-3">
                <label for="cb" class="form-label">Munkanap I/N</label>
                <InputCheckbox id="cb" class="form-check-input" @bind-Value="newIrregularDay.Workday" />
                @* <ValidationMessage class="text-black" For="()=>newIrregularDay.Workday" /> *@
            </div>


@*             <div class="mb-3">
                <label class="ms-3">Role:</label>
                <InputSelect @bind-Value="newPlayer.TeamId" class="form-control">
                    <option>Válassz egy csapatot</option>
                    @foreach (var team in teamlist)
                    {
                        <option value="@team.TeamId">@team.TeamName</option>
                    }
                </InputSelect>
                <ValidationMessage For="()=>newPlayer.TeamId" class="text-danger"></ValidationMessage>
            </div> *@

            <button type="submit" class="btn btn-siker mb-4"> Mentés </button>
            <a href="/indexirregulardays" class="btn  btn-keres mb-4">Vissza</a>

        </EditForm>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    public IrregularDaysDTO newIrregularDay { get; set; } = new();
    public List<IrregularDaysDTO> newIrregularDayList { get; set; } = new();
    public DateTime today = DateTime.Now;

    private static int currentYear { get; set; } = DateTime.Now.Year;

    private List<IrregularDaysDTO> irregularDaylist = new();
    private string errorMessage = String.Empty;
    private bool isloading = false;
    private bool dateExists = false;

    Dictionary<DateTime, bool> fixVacationDays = new Dictionary<DateTime, bool>();

    private void fillDict()
    {
        // fixVacationDays.Add(new DateTime(currentYear, 1, 1), false);
        // fixVacationDays.Add(new DateTime(currentYear, 3, 15), false);
        // fixVacationDays.Add(new DateTime(currentYear, 5, 1), false);
        // fixVacationDays.Add(new DateTime(currentYear, 8, 20), false);
        // fixVacationDays.Add(new DateTime(currentYear, 10, 23), false);
        // fixVacationDays.Add(new DateTime(currentYear, 12, 25), false);
        // fixVacationDays.Add(new DateTime(currentYear, 12, 26), false);

        // foreach (var irrDay in irregularDaylist)
        // {
        //     if (irrDay.IrrDate.Year == 2025 && !fixVacationDays.ContainsKey(irrDay.IrrDate))
        //     {
        //         newIrregularDay.IrrDate = irrDay.IrrDate;
        //         newIrregularDay.Workday = irrDay.Workday;
        //         AddNewIrregularDay();
        //     }   
        // }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadIrregularDayAsync("Vacation/IrregularDay");
    }

    private async Task LoadIrregularDayAsync(string url)
    {
        if (isloading)
        {
            return;
        }

        isloading = true;
        try
        {
            irregularDaylist = await HttpClient.GetFromJsonAsync<List<IrregularDaysDTO>>(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Az adat nem tölthető be! {ex.Message}";
        }
        finally
        {
            isloading = !isloading;
        }
        fillDict();
    }



    private async Task AddNewIrregularDay()
    {
        var response = await HttpClient.PostAsJsonAsync("/DataManagement/AddIrregularDay", newIrregularDay);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/indexirregulardays");
        }
        else
        {
            Console.WriteLine("teszt");
        }
    }


}